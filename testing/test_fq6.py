import pytest
from field.fq import Fq
from field.fq2 import Fq2
from field.fq6 import Fq6


def test_fq6_zero():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    zero = Fq6.zero()
    for val in zero.val:
        assert(val == Fq2.zero())


def test_fq6_one():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    one = Fq6.one()
    i = 0
    for val in one.val:
        if i == 0:
            assert(val == Fq2.one())
        else:
            assert(val == Fq2.zero())
        i += 1


def test_fq6_add():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([3, 4]), Fq2([6, 4]), Fq2([11, 4])])
    c = a + b
    assert(c == res)


def test_fq6_sub():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([3, 0]), Fq2([85, 30]), Fq2([133, 240])])
    c = a - b
    assert(c == res)


def test_fq6_mul():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([7613, 19045]),
               Fq2([5945, 25564]),
               Fq2([234, 1140])])
    c = a * b
    assert(c == res)


def test_fq6_mul_scalar():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    base = 2
    b = a.mul_scalar(base)
    res = Fq6([Fq2([4, 4]), Fq2([10, 4]), Fq2([20, 4])])
    assert(b == res)


def test_fq6_inverse():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([3, 4]), Fq2([5, 6])])
    b = a.inverse()
    c = a * b
    one = Fq6.one()
    assert(c == one)


def test_fq6_div():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    c = a * b
    d = c / b
    assert(d == a)


def test_fq6_frobenius_map():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq2.frobenius_coeffs_c1 = [Fq(1),
                               Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)]
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    a.frobenius_coeffs_c1 = [Fq2([1, 0]),
                             Fq2([21575463638280843010398324269430826099269044274347216827212613867836435027261, 10307601595873709700152284273816112264069230130616436755625194854815875713954]),
                             Fq2([21888242871839275220042445260109153167277707414472061641714758635765020556616, 0]),
                             Fq2([3772000881919853776433695186713858239009073593817195771773381919316419345261, 2236595495967245188281701248203181795121068902605861227855261137820944008926]),
                             Fq2([2203960485148121921418603742825762020974279258880205651966, 0]),
                             Fq2([18429021223477853657660792034369865839114504446431234726392080002137598044644, 9344045779998320333812420223237981029506012124075525679208581902008406485703]),
                             ]
    a.frobenius_coeffs_c2 = [Fq2([1, 0]),
                             Fq2([2581911344467009335267311115468803099551665605076196740867805258568234346338, 19937756971775647987995932169929341994314640652964949448313374472400716661030]),
                             Fq2([2203960485148121921418603742825762020974279258880205651966, 0]),
                             Fq2([5324479202449903542726783395506214481928257762400643279780343368557297135718, 16208900380737693084919495127334387981393726419856888799917914180988844123039]),
                             Fq2([21888242871839275220042445260109153167277707414472061641714758635765020556616, 0]),
                             Fq2([13981852324922362344252311234282257507216387789820983642040889267519694726527, 7629828391165209371577384193250820201684255241773809077146787135900891633097]),
                             ]
    a = a.frobenius_map(3)
    res = Fq6([Fq2([5, 21888242871839275222246405745257275088696311157297823662689037894645226208581]),
               Fq2([17062763550631731903611703332118107358157227495574352822570047045133877604628, 14924837800098920432735649127671072646516912760483774822158167301823863129239]),
               Fq2([21758686387092310821963422632510968520708377124222638435959261943560585754933, 601372476167518358025151469221647543937875145581712535033851642213170947420])])
    assert(a == res)