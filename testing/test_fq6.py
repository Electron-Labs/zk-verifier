import pytest
from field.fq import Fq
from field.fq2 import Fq2
from field.fq6 import Fq6


def test_fq6_zero():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    zero = Fq6.zero()
    for val in zero.val:
        assert(val == Fq2.zero())


def test_fq6_one():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    one = Fq6.one()
    i = 0
    for val in one.val:
        if i == 0:
            assert(val == Fq2.one())
        else:
            assert(val == Fq2.zero())
        i += 1


def test_fq6_add():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([3, 4]), Fq2([6, 4]), Fq2([11, 4])])
    c = a + b
    assert(c == res)


def test_fq6_sub():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([3, 0]), Fq2([85, 30]), Fq2([133, 240])])
    c = a - b
    assert(c == res)


def test_fq6_mul():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    res = Fq6([Fq2([7613, 19045]),
               Fq2([5945, 25564]),
               Fq2([234, 1140])])
    c = a * b
    assert(c == res)


def test_fq6_mul_scalar():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    base = 2
    b = a.mul_scalar(base)
    res = Fq6([Fq2([4, 4]), Fq2([10, 4]), Fq2([20, 4])])
    assert(b == res)


def test_fq6_inverse():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([3, 4]), Fq2([5, 6])])
    b = a.inverse()
    c = a * b
    one = Fq6.one()
    assert(c == one)


def test_fq6_div():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([5, 2]), Fq2([90, 32]), Fq2([143, 242])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    c = a * b
    d = c / b
    assert(d == a)