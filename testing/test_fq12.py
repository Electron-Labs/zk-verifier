from xmlrpc.server import resolve_dotted_attribute
import pytest
from field.fq import Fq
from field.fq2 import Fq2
from field.fq6 import Fq6
from field.fq12 import Fq12


def test_fq12_add():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    a1 = Fq6([Fq2([10, 2]), Fq2([1, 23]), Fq2([12, 24])])
    b1 = Fq6([Fq2([2, 21]), Fq2([54, 21]), Fq2([110, 52])])
    c = Fq12([a, b])
    c1 = Fq12([a1, b1])
    res_a = Fq6([Fq2([11, 4]), Fq2([2, 25]), Fq2([13, 26])])
    res_b = Fq6([Fq2([4, 23]), Fq2([59, 23]), Fq2([120, 54])])
    res = Fq12([res_a, res_b])
    d = c + c1
    assert(d == res)


def test_fq12_sub():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    a1 = Fq6([Fq2([10, 2]), Fq2([1, 23]), Fq2([12, 24])])
    b1 = Fq6([Fq2([2, 21]), Fq2([54, 21]), Fq2([110, 52])])
    c = Fq12([a, b])
    c1 = Fq12([a1, b1])
    res_a = Fq6([Fq2([9, 0]), Fq2([0, 21]), Fq2([11, 22])])
    res_b = Fq6([Fq2([0, 19]), Fq2([49, 19]), Fq2([100, 50])])
    res = Fq12([res_a, res_b])
    d = c1 - c
    assert(d == res)


def test_fq12_mul():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    a1 = Fq6([Fq2([10, 2]), Fq2([1, 23]), Fq2([12, 24])])
    b1 = Fq6([Fq2([2, 21]), Fq2([54, 21]), Fq2([110, 52])])
    c = Fq12([a, b])
    c1 = Fq12([a1, b1])
    res_a = Fq6([Fq2([1351, 7679]), Fq2([7249, 8615]), Fq2([8183, 8010])])
    res_b = Fq6([Fq2([21888242871839275222246405745257275088696311157297823662689037894645226207728, 7036]), Fq2([140, 5134]), Fq2([9, 655])])
    res = Fq12([res_a, res_b])
    d = c * c1
    assert(d == res)


def test_fq12_inverse():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    c = Fq12([a, b])
    c_inv = c.inverse()
    one = Fq12.one()
    assert(c * c_inv == one)


def test_fq12_div():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    a1 = Fq6([Fq2([10, 2]), Fq2([1, 23]), Fq2([12, 24])])
    b1 = Fq6([Fq2([2, 21]), Fq2([54, 21]), Fq2([110, 52])])
    c = Fq12([a, b])
    c1 = Fq12([a1, b1])
    d = c * c1
    e = d / c1
    assert(e == c)


def test_fq12_pow():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    c = Fq12([a, b])
    c_2 = c ** 2
    res = c * c
    assert(c_2 == res)
    c_3 = c ** 3
    res *= c
    assert(c_3 == res)


def test_fq12_mul_scalar():
    Fq.field_modulus = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    Fq2.non_residue = Fq(21888242871839275222246405745257275088696311157297823662689037894645226208582)
    Fq6.non_residue = Fq2([9, 1])
    Fq12.non_residue = Fq2([9, 1])
    a = Fq6([Fq2([1, 2]), Fq2([1, 2]), Fq2([1, 2])])
    b = Fq6([Fq2([2, 2]), Fq2([5, 2]), Fq2([10, 2])])
    c = Fq12([a, b])
    d = c.mul_scalar(4)
    res_a = Fq6([Fq2([4, 8]), Fq2([4, 8]), Fq2([4, 8])])
    res_b = Fq6([Fq2([8, 8]), Fq2([20, 8]), Fq2([40, 8])])
    res = Fq12([res_a, res_b])
    assert(d == res)